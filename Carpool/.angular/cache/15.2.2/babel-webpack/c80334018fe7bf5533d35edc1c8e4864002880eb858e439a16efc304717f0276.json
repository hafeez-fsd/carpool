{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginComponent = class LoginComponent {\n  constructor(dataService, userService, router) {\n    this.dataService = dataService;\n    this.userService = userService;\n    this.router = router;\n    this.login = {\n      email: '',\n      password: ''\n    };\n    this.user = {\n      id: 1,\n      firstName: '',\n      lastName: '',\n      username: '',\n      type: 1,\n      email: '',\n      password: '',\n      mobile: '',\n      isActive: false\n    };\n  }\n  submitForm(loginForm) {\n    let user = {\n      email: this.login.email,\n      password: this.login.password\n    };\n    this.dataService.loginUser(user).subscribe(responseData => {\n      this.handleResponse(responseData);\n      this.login.email = '';\n      this.login.password = '';\n      loginForm.form.reset();\n      if (this.decodedToken != null) {\n        this.router.navigate(['/acc/menu']);\n      } else {\n        alert(\"Error! Wrong Credentials!\");\n      }\n    });\n  }\n  handleResponse(responseData) {\n    this.userService.storeInLocalStorage('token', responseData.data);\n    this.decodedToken = this.userService.getDecodedToken(responseData.data);\n    this.user.id = parseInt(this.decodedToken.id);\n    this.user.email = this.decodedToken.email;\n    this.user.firstName = this.decodedToken.firstName;\n    this.user.lastName = this.decodedToken.lastName;\n    this.user.password = this.decodedToken.password;\n    this.user.mobile = this.decodedToken.mobile;\n    this.user.username = this.decodedToken.username;\n    this.user.isActive = this.decodedToken.isActive == \"True\";\n    this.user.type = this.checkUserType(this.decodedToken.type);\n    this.dataService.loggedinUser = this.user;\n    this.userService.storeInLocalStorage('token', responseData.data);\n    this.userService.storeInLocalStorage('user', this.user);\n  }\n  checkUserType(type) {\n    if (type == \"AppUser\") {\n      return 1;\n    } else if (type == \"DbAdmin\") {\n      return 2;\n    } else return 3;\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":"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","names":["Component","LoginComponent","constructor","dataService","userService","router","email","password","id","firstName","lastName","username","type","mobile","isActive","submitForm","loginForm","user","login","loginUser","subscribe","responseData","handleResponse","form","reset","decodedToken","navigate","alert","storeInLocalStorage","data","getDecodedToken","parseInt","checkUserType","loggedinUser","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/hafeez/My stuff/Technovert Internship/Task 5/task-5-car-pooling-web-api-csharp-hafeez-fsd/Carpool/src/app/authentication/login/login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Login } from 'src/app/shared/models/login';\nimport { DataService } from 'src/app/shared/services/data.service';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { User } from 'src/app/shared/models/user';\nimport { UserService } from 'src/app/shared/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n\n  login:Login={\n    email:'',\n    password:'',\n  };\n\n  decodedToken:any;\n\n  user:User={\n    id:1,\n    firstName:'',\n    lastName:'',\n    username:'',\n    type:1,\n    email:'',\n    password:'',\n    mobile:'',\n    isActive:false\n  };\n\n  constructor(private dataService:DataService, private userService:UserService, private router:Router) {\n    \n  }\n\n  submitForm(loginForm:NgForm){\n    let user:Login={\n      email:this.login.email,\n      password:this.login.password\n    };\n\n    this.dataService.loginUser(user).subscribe(\n      responseData=>{\n        this.handleResponse(responseData);\n        this.login.email='';\n        this.login.password='';  \n        loginForm.form.reset();\n\n        if(this.decodedToken!=null){\n          this.router.navigate(['/acc/menu']);\n        }\n        else{\n          alert(\"Error! Wrong Credentials!\");\n        }\n      }\n     );\n  }\n\n  handleResponse(responseData:any){\n    this.userService.storeInLocalStorage('token', responseData.data);\n    this.decodedToken=this.userService.getDecodedToken(responseData.data);\n    \n    this.user.id=parseInt(this.decodedToken.id);\n    this.user.email=this.decodedToken.email;\n    this.user.firstName=this.decodedToken.firstName;\n    this.user.lastName=this.decodedToken.lastName;\n    this.user.password=this.decodedToken.password;\n    this.user.mobile=this.decodedToken.mobile;\n    this.user.username=this.decodedToken.username;\n    this.user.isActive=(this.decodedToken.isActive)==\"True\";\n    this.user.type=this.checkUserType(this.decodedToken.type);\n\n    this.dataService.loggedinUser=this.user;\n    \n    this.userService.storeInLocalStorage('token', responseData.data);\n    this.userService.storeInLocalStorage('user', this.user);\n  }\n\n\n  checkUserType(type:string){\n    if(type==\"AppUser\")\n    {\n      return 1;\n    }\n    else if(type==\"DbAdmin\"){\n      return 2;\n    }\n    else return 3;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}