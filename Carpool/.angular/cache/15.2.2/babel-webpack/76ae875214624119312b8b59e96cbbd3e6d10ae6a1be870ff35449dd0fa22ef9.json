{"ast":null,"code":"import { BookingResponse } from '../models/bookingResponse';\nimport { environment } from 'src/environments/environment';\nimport { ConfigService } from '../config.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  // baseUrl:'https://localhost:7021/api',\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = ConfigService.getBaseUrl();\n    this.loggedinUser = {\n      id: 1,\n      firstName: '',\n      lastName: '',\n      username: '',\n      type: 1,\n      email: '',\n      password: '',\n      mobile: '',\n      isActive: false\n    };\n    this.locations = [];\n    this.bookingResponse = new BookingResponse();\n    this.matches = [];\n    this.users = [];\n    this.apiURL = environment.baseUrl;\n  }\n  signupUser(user) {\n    return this.http.post('https://localhost:7021/api/authentication/signup', user);\n  }\n  loginUser(user) {\n    return this.http.post('https://localhost:7021/api/authentication/login', user);\n  }\n  fetchOffers(user) {\n    // let url=`${this.apiURL}/Offer/GetOffers`;\n    // return this.http.post<APIResponse<OfferResponse[]>>(url, user);\n    return this.http.post(`https://localhost:7021/api/Offer/GetOffers`, user);\n  }\n  fetchBookings(user) {\n    // return this.http.post<APIResponse<OfferResponse[]>>(`${this.apiURL}/Booking/GetBookings`, user);\n    return this.http.post('https://localhost:7021/api/Booking/GetBookings', user);\n  }\n  getLocations() {\n    return this.http.get('https://localhost:7021/api/Location');\n  }\n  bookRide(request) {\n    return this.http.post('https://localhost:7021/api/Booking', request);\n  }\n  findMatches(booking) {\n    return this.http.post('https://localhost:7021/api/Offer/FindMatches', booking);\n  }\n  offerRide(request) {\n    return this.http.post('https://localhost:7021/api/Offer', request);\n  }\n  logRideTransaction(transaction) {\n    return this.http.post('https://localhost:7021/api/Ride', transaction);\n  }\n  updateUser(user) {\n    return this.http.put('https://localhost:7021/api/User', user);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAUA,SAASA,eAAe,QAAQ,2BAA2B;AAI3D,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,aAAa,QAAQ,mBAAmB;;;AAKjD,OAAM,MAAOC,WAAW;EAsBtB;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAvBxB,YAAO,GAAGH,aAAa,CAACI,UAAU,EAAE;IAEpC,iBAAY,GAAM;MAChBC,EAAE,EAAC,CAAC;MACJC,SAAS,EAAC,EAAE;MACZC,QAAQ,EAAC,EAAE;MACXC,QAAQ,EAAC,EAAE;MACXC,IAAI,EAAC,CAAC;MACNC,KAAK,EAAC,EAAE;MACRC,QAAQ,EAAC,EAAE;MACXC,MAAM,EAAC,EAAE;MACTC,QAAQ,EAAC;KACV;IAED,cAAS,GAAY,EAAE;IACvB,oBAAe,GAAmB,IAAIf,eAAe,EAAE;IAEvD,YAAO,GAAiB,EAAE;IAC1B,UAAK,GAAQ,EAAE;IACf,WAAM,GAAUC,WAAW,CAACe,OAAO;EAIK;EAExCC,UAAU,CAACC,IAAY;IACrB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAqB,kDAAkD,EAAED,IAAI,CAAC;EACrG;EAEAE,SAAS,CAACF,IAAW;IACnB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAsB,iDAAiD,EAAED,IAAI,CAAC;EACrG;EAEAG,WAAW,CAACH,IAAU;IACpB;IACA;IACA,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAA+B,4CAA4C,EAAED,IAAI,CAAC;EACzG;EAEAI,aAAa,CAACJ,IAAU;IACtB;IACA,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAiC,gDAAgD,EAAED,IAAI,CAAC;EAC/G;EAEAK,YAAY;IACV,OAAO,IAAI,CAAClB,IAAI,CAACmB,GAAG,CAA0B,qCAAqC,CAAC;EACtF;EAEAC,QAAQ,CAACC,OAAsB;IAC7B,OAAO,IAAI,CAACrB,IAAI,CAACc,IAAI,CAA+B,oCAAoC,EAAEO,OAAO,CAAC;EACpG;EAEAC,WAAW,CAACC,OAAuB;IACjC,OAAO,IAAI,CAACvB,IAAI,CAACc,IAAI,CAA+B,8CAA8C,EAAES,OAAO,CAAC;EAC9G;EAEAC,SAAS,CAACH,OAAoB;IAC5B,OAAO,IAAI,CAACrB,IAAI,CAACc,IAAI,CAA6B,kCAAkC,EAAEO,OAAO,CAAC;EAChG;EAEAI,kBAAkB,CAACC,WAAuB;IACxC,OAAO,IAAI,CAAC1B,IAAI,CAACc,IAAI,CAA4B,iCAAiC,EAAEY,WAAW,CAAC;EAClG;EAEAC,UAAU,CAACd,IAAS;IAClB,OAAO,IAAI,CAACb,IAAI,CAAC4B,GAAG,CAAoB,iCAAiC,EAAEf,IAAI,CAAC;EAClF;;AAnEWf,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;EAAAgC,YAFV;AAAM","names":["BookingResponse","environment","ConfigService","DataService","constructor","http","getBaseUrl","id","firstName","lastName","username","type","email","password","mobile","isActive","baseUrl","signupUser","user","post","loginUser","fetchOffers","fetchBookings","getLocations","get","bookRide","request","findMatches","booking","offerRide","logRideTransaction","transaction","updateUser","put","factory","providedIn"],"sourceRoot":"","sources":["/Users/hafeez/My stuff/Technovert Internship/Task 5/task-5-car-pooling-web-api-csharp-hafeez-fsd/Carpool/src/app/shared/services/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Login } from '../models/login';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { APIResponse } from '../models/api-response';\nimport { Signup } from '../models/signup';\nimport { Location } from '../models/location';\nimport { BookingRequest } from '../models/bookingRequest';\nimport { OfferRequest } from '../models/offerRequest';\nimport { User } from '../models/user';\nimport { BookingResponse } from '../models/bookingResponse';\nimport { OfferResponse } from '../models/offerResponse';\nimport { RideResponse } from '../models/rideResponse';\nimport { RideRequest } from '../models/rideRequest';\nimport { environment } from 'src/environments/environment';\nimport { ConfigService } from '../config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  baseUrl = ConfigService.getBaseUrl();\n\n  loggedinUser:User={\n    id:1,\n    firstName:'',\n    lastName:'',\n    username:'',\n    type:1,\n    email:'',\n    password:'',\n    mobile:'',\n    isActive:false\n  };\n  \n  locations:Location[]=[];\n  bookingResponse:BookingResponse = new BookingResponse();\n\n  matches:OfferResponse[]=[];\n  users:User[]=[];\n  apiURL:string = environment.baseUrl;\n\n  // baseUrl:'https://localhost:7021/api',\n\n  constructor(private http: HttpClient) { }\n\n  signupUser(user: Signup) {\n    return this.http.post<APIResponse<Login>>('https://localhost:7021/api/authentication/signup', user);\n  }\n\n  loginUser(user: Login) {\n    return this.http.post<APIResponse<string>>('https://localhost:7021/api/authentication/login', user);\n  }\n\n  fetchOffers(user: User) {\n    // let url=`${this.apiURL}/Offer/GetOffers`;\n    // return this.http.post<APIResponse<OfferResponse[]>>(url, user);\n    return this.http.post<APIResponse<OfferResponse[]>>(`https://localhost:7021/api/Offer/GetOffers`, user);\n  }\n\n  fetchBookings(user: User) {\n    // return this.http.post<APIResponse<OfferResponse[]>>(`${this.apiURL}/Booking/GetBookings`, user);\n    return this.http.post<APIResponse<BookingResponse[]>>('https://localhost:7021/api/Booking/GetBookings', user);\n  }\n  \n  getLocations() {\n    return this.http.get<APIResponse<Location[]>>('https://localhost:7021/api/Location');\n  }\n\n  bookRide(request:BookingRequest){\n    return this.http.post<APIResponse<BookingResponse>>('https://localhost:7021/api/Booking', request);\n  }\n\n  findMatches(booking:BookingResponse){\n    return this.http.post<APIResponse<OfferResponse[]>>('https://localhost:7021/api/Offer/FindMatches', booking);\n  }\n\n  offerRide(request:OfferRequest){\n    return this.http.post<APIResponse<OfferResponse>>('https://localhost:7021/api/Offer', request);\n  }\n\n  logRideTransaction(transaction:RideRequest){\n    return this.http.post<APIResponse<RideResponse>>('https://localhost:7021/api/Ride', transaction);\n  }\n\n  updateUser(user:User){\n    return this.http.put<APIResponse<User>>('https://localhost:7021/api/User', user);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}