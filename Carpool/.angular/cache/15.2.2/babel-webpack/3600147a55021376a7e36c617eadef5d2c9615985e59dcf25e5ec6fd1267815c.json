{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.loggedinUser = {\n      id: 1,\n      firstName: '',\n      lastName: '',\n      username: '',\n      type: 1,\n      email: '',\n      password: '',\n      mobile: '',\n      isActive: false\n    };\n    this.locations = [];\n    this.bookingResponse = {\n      id: -1,\n      bookerId: 0,\n      from: -1,\n      to: -1,\n      time: \"\",\n      date: \"\",\n      seatsRequired: -1,\n      bookedTime: \"\"\n    };\n    this.matches = [];\n  }\n  signupUser(user) {\n    return this.http.post('https://localhost:7021/api/authentication/signup', user);\n  }\n  loginUser(user) {\n    return this.http.post('https://localhost:7021/api/authentication/login', user);\n  }\n  fetchOffers(user) {\n    return this.http.post('https://localhost:7021/api/authentication/login', user);\n  }\n  fetchBookings(user) {\n    return this.http.post('https://localhost:7021/api/authentication/login', user);\n  }\n  getLocations() {\n    return this.http.get('https://localhost:7021/api/Location');\n  }\n  bookRide(request) {\n    return this.http.post('https://localhost:7021/api/Booking', request);\n  }\n  findMatches(booking) {\n    return this.http.post('https://localhost:7021/api/Offer/FindMatches', booking);\n  }\n  offerRide(request) {\n    return this.http.post('https://localhost:7021/api/Offer', request);\n  }\n  logRideTransaction(transaction) {\n    return this.http.post('https://localhost:7021/api/Ride', transaction);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAkBA,OAAM,MAAOA,WAAW;EA8BtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IA5BxB,iBAAY,GAAM;MAChBC,EAAE,EAAC,CAAC;MACJC,SAAS,EAAC,EAAE;MACZC,QAAQ,EAAC,EAAE;MACXC,QAAQ,EAAC,EAAE;MACXC,IAAI,EAAC,CAAC;MACNC,KAAK,EAAC,EAAE;MACRC,QAAQ,EAAC,EAAE;MACXC,MAAM,EAAC,EAAE;MACTC,QAAQ,EAAC;KAIV;IACD,cAAS,GAAY,EAAE;IACvB,oBAAe,GAAiB;MAC9BR,EAAE,EAAC,CAAC,CAAC;MACLS,QAAQ,EAAC,CAAC;MACVC,IAAI,EAAC,CAAC,CAAC;MACPC,EAAE,EAAC,CAAC,CAAC;MACLC,IAAI,EAAC,EAAE;MACPC,IAAI,EAAC,EAAE;MACPC,aAAa,EAAC,CAAC,CAAC;MAChBC,UAAU,EAAC;KACZ;IAED,YAAO,GAAiB,EAAE;EAEc;EAExCC,UAAU,CAACC,IAAY;IACrB,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAqB,kDAAkD,EAAED,IAAI,CAAC;EACrG;EAEAE,SAAS,CAACF,IAAW;IACnB,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAqB,iDAAiD,EAAED,IAAI,CAAC;EACpG;EAEAG,WAAW,CAACH,IAAU;IACpB,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAqB,iDAAiD,EAAED,IAAI,CAAC;EACpG;EAEAI,aAAa,CAACJ,IAAU;IACtB,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAqB,iDAAiD,EAAED,IAAI,CAAC;EACpG;EAEAK,YAAY;IACV,OAAO,IAAI,CAACvB,IAAI,CAACwB,GAAG,CAA0B,qCAAqC,CAAC;EACtF;EAEAC,QAAQ,CAACC,OAAsB;IAC7B,OAAO,IAAI,CAAC1B,IAAI,CAACmB,IAAI,CAA+B,oCAAoC,EAAEO,OAAO,CAAC;EACpG;EAEAC,WAAW,CAACC,OAAuB;IACjC,OAAO,IAAI,CAAC5B,IAAI,CAACmB,IAAI,CAA+B,8CAA8C,EAAES,OAAO,CAAC;EAC9G;EAEAC,SAAS,CAACH,OAAoB;IAC5B,OAAO,IAAI,CAAC1B,IAAI,CAACmB,IAAI,CAA6B,kCAAkC,EAAEO,OAAO,CAAC;EAChG;EAEAI,kBAAkB,CAACC,WAAuB;IACxC,OAAO,IAAI,CAAC/B,IAAI,CAACmB,IAAI,CAA4B,iCAAiC,EAAEY,WAAW,CAAC;EAClG;;AAlEWjC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkC,SAAXlC,WAAW;EAAAmC,YAFV;AAAM","names":["DataService","constructor","http","id","firstName","lastName","username","type","email","password","mobile","isActive","bookerId","from","to","time","date","seatsRequired","bookedTime","signupUser","user","post","loginUser","fetchOffers","fetchBookings","getLocations","get","bookRide","request","findMatches","booking","offerRide","logRideTransaction","transaction","factory","providedIn"],"sourceRoot":"","sources":["/Users/hafeez/My stuff/Technovert Internship/Task 5/task-5-car-pooling-web-api-csharp-hafeez-fsd/Carpool/src/app/shared/services/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Login } from '../models/login';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { APIResponse } from '../models/api-response';\nimport { Signup } from '../models/signup';\nimport { Location } from '../models/location';\nimport { BookingRequest } from '../models/bookingRequest';\nimport { OfferRequest } from '../models/offerRequest';\nimport { User } from '../models/user';\nimport { BookingResponse } from '../models/bookingResponse';\nimport { OfferResponse } from '../models/offerResponse';\nimport { RideResponse } from '../models/rideResponse';\nimport { RideRequest } from '../models/rideRequest';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  loggedinUser:User={\n    id:1,\n    firstName:'',\n    lastName:'',\n    username:'',\n    type:1,\n    email:'',\n    password:'',\n    mobile:'',\n    isActive:false\n    \n\n    \n  };\n  locations:Location[]=[];\n  bookingResponse:BookingResponse={\n    id:-1,\n    bookerId:0,\n    from:-1,\n    to:-1,\n    time:\"\",\n    date:\"\",\n    seatsRequired:-1,\n    bookedTime:\"\"\n  };\n\n  matches:OfferResponse[]=[];\n\n  constructor(private http: HttpClient) { }\n\n  signupUser(user: Signup) {\n    return this.http.post<APIResponse<Login>>('https://localhost:7021/api/authentication/signup', user);\n  }\n\n  loginUser(user: Login) {\n    return this.http.post<APIResponse<Login>>('https://localhost:7021/api/authentication/login', user);\n  }\n\n  fetchOffers(user: User) {\n    return this.http.post<APIResponse<Login>>('https://localhost:7021/api/authentication/login', user);\n  }\n\n  fetchBookings(user: User) {\n    return this.http.post<APIResponse<Login>>('https://localhost:7021/api/authentication/login', user);\n  }\n  \n  getLocations() {\n    return this.http.get<APIResponse<Location[]>>('https://localhost:7021/api/Location');\n  }\n\n  bookRide(request:BookingRequest){\n    return this.http.post<APIResponse<BookingResponse>>('https://localhost:7021/api/Booking', request);\n  }\n\n  findMatches(booking:BookingResponse){\n    return this.http.post<APIResponse<OfferResponse[]>>('https://localhost:7021/api/Offer/FindMatches', booking);\n  }\n\n  offerRide(request:OfferRequest){\n    return this.http.post<APIResponse<OfferResponse>>('https://localhost:7021/api/Offer', request);\n  }\n\n  logRideTransaction(transaction:RideRequest){\n    return this.http.post<APIResponse<RideResponse>>('https://localhost:7021/api/Ride', transaction);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}