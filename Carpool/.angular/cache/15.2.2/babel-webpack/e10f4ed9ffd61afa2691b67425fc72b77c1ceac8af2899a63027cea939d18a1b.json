{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../user.service\";\nexport class InterceptorService {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  intercept(request, next) {\n    // Add authorization header with token if available\n    const token = this.userService.getFromLocalStorage('token');\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\nInterceptorService.ɵfac = function InterceptorService_Factory(t) {\n  return new (t || InterceptorService)(i0.ɵɵinject(i1.UserService));\n};\nInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InterceptorService,\n  factory: InterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,kBAAkB;EAE7BC,YAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;EAC/B;EAEAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD;IACA,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,mBAAmB,CAAC,OAAO,CAAC;IAC3D,IAAID,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAE;OAC/C,CAAC;;IAEJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC7B;;AAdWJ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAY,SAAlBZ,kBAAkB;EAAAa,YAFjB;AAAM","names":["InterceptorService","constructor","userService","intercept","request","next","token","getFromLocalStorage","clone","setHeaders","Authorization","handle","factory","providedIn"],"sourceRoot":"","sources":["/Users/hafeez/My stuff/Technovert Internship/Task 5/task-5-car-pooling-web-api-csharp-hafeez-fsd/Carpool/src/app/shared/services/interceptor.service.ts"],"sourcesContent":["import { HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { UserService } from '../user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InterceptorService implements HttpInterceptor {\n\n  constructor(private userService:UserService) {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler) {\n    // Add authorization header with token if available\n    const token = this.userService.getFromLocalStorage('token');\n    if (token) {\n      request = request.clone({\n        setHeaders: { Authorization: `Bearer ${token}` }\n      });\n    }\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}